<template>
    <div class="json-viewer">
      <!-- 根节点开始 -->
      <div v-if="isRoot" class="json-root">
        <h2 v-if="title">{{ title }}</h2>
        <json-node :value="jsonData" :key="rootKey" :depth="0" />
      </div>
      
      <!-- 递归组件定义 -->
      <template v-else>
        <!-- 对象类型 -->
        <div v-if="isObject" class="json-object" :style="indentStyle">
          <span class="json-brace">{</span>
          <div v-for="(value, key) in value" :key="key" class="json-property">
            <span class="json-key">"{{ key }}": </span>
            <json-node :value="value" :depth="depth + 1" />
            <span class="json-comma">,</span>
          </div>
          <span class="json-brace">}</span>
        </div>
        
        <!-- 数组类型 -->
        <div v-else-if="isArray" class="json-array" :style="indentStyle">
          <span class="json-bracket">[</span>
          <div v-for="(item, index) in value" :key="index" class="json-item">
            <json-node :value="item" :depth="depth + 1" />
            <span class="json-comma">,</span>
          </div>
          <span class="json-bracket">]</span>
        </div>
        
        <!-- 基本类型 -->
        <span v-else class="json-value" :class="valueType" :style="indentStyle">
          {{ formattedValue }}
        </span>
      </template>
    </div>
</template>
  
<script lang="ts" setup>
  import { type PersonInter } from '@types/index'
  import { defineProps } from 'vue'
  import { defineComponent } from 'vue'
  import PropType

  let props = withDefaults(defineProps<{list?:Persons}>(),{
     list:()=>[{id:'asdasg01',name:'小猪佩奇',age:18}]
  })

  export default defineComponent({
    name: 'JsonNode',
    
    // 递归组件必须定义name属性，并在组件内部使用
    components: {
      JsonNode: () => import('./JsonNode.vue') // 递归自引用
    },
    
    props: {
      value: { 
        type: [Object, Array, String, Number, Boolean, null] as PropType<JsonValue>,
        required: true 
      }, // 当前节点的值
      depth: { type: Number, default: 0 }, // 当前嵌套深度
      title: { type: String, default: '' }, // 根节点标题
      isRoot: { type: Boolean, default: false } // 是否为根节点
    },
    
    computed: {
      // 生成根节点唯一key
      rootKey() {
        return `json-root-${Date.now()}`
      },
      
      // 判断当前值是否为对象
      isObject() {
        return this.value && typeof this.value === 'object' && !Array.isArray(this.value)
      },
      
      // 判断当前值是否为数组
      isArray() {
        return Array.isArray(this.value)
      },
      
      // 获取值的类型
      valueType() {
        if (this.value === null) return 'null'
        if (this.isObject) return 'object'
        if (this.isArray) return 'array'
        return typeof this.value
      },
      
      // 格式化显示的值
      formattedValue() {
        if (this.value === null) return 'null'
        if (this.value === undefined) return 'undefined'
        if (typeof this.value === 'string') return `"${this.value}"`
        return String(this.value)
      },
      
      // 根据深度生成缩进样式
      indentStyle() {
        return { 
          marginLeft: `${this.depth * 20}px`,
          paddingLeft: this.depth > 0 ? '10px' : '0'
        }
      },
      
      // 当前JSON数据
      jsonData() {
        return this.isRoot ? this.value : this.value
      }
    }
  })
</script>
  
<style scoped>
  .json-viewer {
    font-family: 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.5;
    color: #333;
    background-color: #f8f8f8;
    padding: 15px;
    border-radius: 4px;
    overflow-x: auto;
  }
  
  .json-root {
    background-color: white;
    padding: 20px;
    border: 1px solid #e1e1e1;
    border-radius: 4px;
  }
  
  .json-object, .json-array {
    border-left: 1px dashed #ccc;
  }
  
  .json-property, .json-item {
    position: relative;
  }
  
  .json-key {
    color: #881391;
    font-weight: bold;
  }
  
  .json-value.string {
    color: #c41a16;
  }
  
  .json-value.number {
    color: #1c00cf;
  }
  
  .json-value.boolean {
    color: #0d22aa;
  }
  
  .json-value.null {
    color: #666;
  }
  
  .json-brace, .json-bracket {
    color: #000;
    font-weight: bold;
  }
  
  .json-comma {
    color: #000;
  }
  
  .json-toggle {
    cursor: pointer;
    margin-right: 5px;
    color: #666;
  }
  
  .json-collapsed {
    color: #999;
    font-style: italic;
  }
  
  /* 添加悬停效果 */
  .json-property:hover, .json-item:hover {
    background-color: #f0f0f0;
  }
  
  /* 响应式调整 */
  @media (max-width: 768px) {
    .json-viewer {
      font-size: 12px;
    }
  }
</style>